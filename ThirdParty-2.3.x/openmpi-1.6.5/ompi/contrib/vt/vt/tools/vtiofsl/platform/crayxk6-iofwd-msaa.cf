
log {
  // By default, 2 sinks (stdout and stderr) are available
  // as is the default filter ('default')
  // Without additional config, all output goes to stderr
  // with a default loglevel of INFO.
  // Note that the default loglevel can be changed by using
  // the IOFWD_LOGLEVEL variable

  loglevel = "INFO";

  sinks = ( "tmpfile" );
  filters = ( );

  tmpfile {
     sinktype = "file";
  }

}

bmi
{
  listen = "SERVER_ADDR";
}

net
{
   //type = "local";
   //type = "tcp";
   type = "tcp";
   tcp
   {
	   addrlist=( RPC_IP_LIST );
   }
}

extra_services {
   // List extra services that need to be started
   // services = ( "ftb" );
   //services = ( "rpctest");
   // Atomic Append RPC service
   services = ( "aarpc");

   aarpc
   {
       //mode = "master";
       //master = "localhost";

       mode = "distributed";

       //
       // AARPC coalescing / batching
       //
       batch
       {
           //
           // enable or disable batch mode
           //
           enable = "false";

           //
           // batch time interval (in ms)
           //
           period = "100";

           //
           // limit number of RPCs to coalesce
           //
           reqlimit = "64";
       }
   }

   ftb {
      period = "60";
   }
}

frontend {

  //
  // bmi buffer pool options
  //
  bmimemorymanager {
    //
    // the max number of bmi buffers that are used at any
    //  point in time
    //  default: 0
    //
    maxnumbuffers = "512";

    //
    // the max amount of mem allocated by the nbio pool
    // default: 256MB
    //
    // 1 GB
    //maxmem = "1073741824";
    // 2GB
    maxmem = "2147483648";
  }

  //
  // zoidfs non-blocking io buffer pool options
  //
  nbiomemorymanager {
    //
    // the max number of nbio buffers that are used at any
    //  point in time
    //  default: 0
    //

    // 4 MB/buffer * 3072 buffers = 12 GB total
    maxnumbuffers = "3072";

    //
    // the max amount of mem allocated by the nbio pool
    // default: 256MB
    //

    // 8 GB
    maxmem = "8589934592";
    // 12 GB
    //maxmem = "12884901888";

    zerocopy = "false";
  }

}

//
// options used by the IOFWD request handler
//  and subcomponents
//
requesthandler {
  //
  // zoidfs api options
  //
  zoidfsapi {

    name = "defasync";
    defasync {
      blocking_api = "zoidfs";

      // should we use the threadpool for the zoidfs driver 
      use_thread_pool = "TrUe";

      // which zoidfs op are high prio... READ,WRITE,LOOKUP,CREATE,REMOVE,SET_ATTR,GET_ATTR,SYMLINK,READLINK,READDIR,LINK,NULL
      highprioops = "READ,WRITE,LOOKUP,CREATE,REMOVE";

      zoidfs {
    //
    // the handlers to be loaded at runtime
    //  if a specified handler is not available,
    //  it is ignored
    //  default: LOCAL
    //
    handlers = ("POSIX","SYSIO","PVFS2","NOFS","LOCAL");

    //
    // options for the nofs handler
    //
    nofs {
    }

    //
    // options for the posix handler
    //
    posix 
    {
      lustre_group_locks = "0";
    }

    //
    // options for the pvfs2 handler
    //
    pvfs2 {
    }

    //
    // options for the sysio handler
    //
    sysio {
        driver = "native";
        mountpoint = "/";
        filesystem = "/dev/shm/sysio";
    }

    gridftp {
        username = "copej";
        userpass = "";
        subject = "";
        enableconnectioncache = "1";
        parallelstreams = "4";
    }

    //
    // options for the local handler
    //
    local {
    }

      }
    }
  }

  //
  // threadpool config
  //
  threadpool {
      //
      // Normal prio threads
      //
      normprio
      {
          maxlimits = "FILEIO:4,SM:2,RPC:2,OTHER:0";
          warnlimits = "FILEIO:1,SM:1,RPC:1,OTHER:0";
      }

      //
      // High prio threads
      //
      highprio
      {
          maxlimits = "FILEIO:16,SM:6,RPC:2,OTHER:0";
          warnlimits = "FILEIO:1,SM:1,RPC:1,OTHER:0";
      }
  }

  //
  // event handler options
  //  TASK - IOFWD tasks
  //  SM - IOFWD state machines
  //
  events {
      mode = "SM";

      // SM specific options
      sm
      {
        // should the SMManager schedule code on the high prio TP ?
        highprio = "TRUE";
      }
  }
}
