/*=========================================================================

  Program:   Visualization Toolkit
  Module:    vtkSMPToolsInternal.h.in

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
#include "vtkMultiThreader.h"
#include "vtkNew.h"

VTKCOMMONCORE_EXPORT std::vector<vtkMultiThreaderIDType>& vtkSMPToolsGetThreadIds();
VTKCOMMONCORE_EXPORT void vtkSMPToolsInitialize();
VTKCOMMONCORE_EXPORT int vtkSMPToolsGetNumberOfThreads();

namespace vtk
{
namespace detail
{
namespace smp
{
template <typename T>
void vtkSMPToolsForEach(vtkIdType first,
                            vtkIdType last,
                            T* op,
                            int grain)
{
  vtkIdType n = last - first;
  if (!n)
    {
    return;
    }

  if (grain == 0 || grain >= n)
    {
    op->Execute(first, last);
    }
  else
    {
    vtkIdType b = first;
    while (b < last)
      {
      vtkIdType e = b + grain;
      if (e > last)
        {
        e = last;
        }
      //cout << b << " " << e << endl;
      op->Execute(b, e);
      b = e;
      }
    }
}


struct vtkSMPToolsExecuteArgs
{
  vtkIdType First;
  vtkIdType Last;
  void* Functor;
  int Grain;
};

template <typename T>
VTK_THREAD_RETURN_TYPE vtkSMPToolsExecute(void *varg)
{
  vtkMultiThreader::ThreadInfo* arg =
    static_cast<vtkMultiThreader::ThreadInfo*>(varg);

  int threadId = arg->ThreadID;
  int threadCount = arg->NumberOfThreads;

  std::vector<vtkMultiThreaderIDType>& threadIds =
    vtkSMPToolsGetThreadIds();
  threadIds[threadId] = vtkMultiThreader::GetCurrentThreadID();

  //pthread_barrier_wait(&barr);

  vtkSMPToolsExecuteArgs* fargs =
    static_cast<vtkSMPToolsExecuteArgs*>(arg->UserData);

  vtkIdType n = fargs->Last - fargs->First;
  if (n > threadCount)
    {
    vtkIdType count = n / threadCount;
    vtkIdType begin = fargs->First + count*threadId;
    vtkIdType end;
    if (threadId == threadCount - 1)
      {
      end = fargs->Last;
      }
    else
      {
      end = begin + count;
      }
    vtkSMPToolsForEach(begin, end, (T*)(fargs->Functor), fargs->Grain);
    }
  else
    {
    if (threadId == 0)
      {
      cerr << "0 executing all" << endl;
      }
    }

  return VTK_THREAD_RETURN_VALUE;
}

template <typename FunctorInternal>
static void vtkSMPTools_Impl_For(
  vtkIdType first, vtkIdType last, vtkIdType grain,
  FunctorInternal& fi)
{
  vtkSMPToolsInitialize();

  vtkSMPToolsExecuteArgs args;
  args.First = first;
  args.Last = last;
  args.Functor = (void*)(&fi);
  args.Grain = grain;

  //pthread_barrier_init(&barr, NULL, vtkSMPToolsNumberOfThreads);

  vtkNew<vtkMultiThreader> threader;
  threader->SetNumberOfThreads(vtkSMPToolsGetNumberOfThreads());
  threader->SetSingleMethod(vtkSMPToolsExecute<FunctorInternal>, &args);
  threader->SingleMethodExecute();

  //pthread_barrier_destroy(&barr);
}
}
}
}
